<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Engine.get">
			<summary>
			Returns a pointer to the existing engine instance.
			</summary>  
			<returns>Pointer to the existing engine.</returns>
		</member>
		<member name="M:Unigine.Engine.getAppPath">
			<summary>
			Returns the path to a directory where binary executable file is stored.
			</summary>  
			<returns>Path to a directory where binary executable file is stored.</returns>
		</member>
		<member name="M:Unigine.Engine.getArg(int) const">
			<summary>
			Returns a command line argument by its index.
			</summary> 
			<param name="num"> Index of the command line argument. </param> 
			<returns>Command line argument.</returns>
		</member>
		<member name="M:Unigine.Engine.getArgf(int) const">
			<summary>
			Returns a command line argument by its index converted to a floating point value.
			</summary> 
			<param name="num"> Index of the command line argument. </param> 
			<returns>Command line argument.</returns>
		</member>
		<member name="M:Unigine.Engine.getArgi(int) const">
			<summary>
			Returns a command line argument by its index converted to an integer value.
			</summary> 
			<param name="num"> Index of the command line argument. </param> 
			<returns>Command line argument.</returns>
		</member>
		<member name="M:Unigine.Engine.getBuildConfiguration">
			<summary>
			Returns the current Engine build configuration.
			</summary>  
			<returns>Current build configuration. One of the BUILD_CONFIG_ values.</returns>
		</member>
		<member name="M:Unigine.Engine.getCachePath">
			<summary>
			Returns a path to a directory where cached files will be stored.
			</summary>  
			<returns>Path to the directory with cached files.</returns>
		</member>
		<member name="M:Unigine.Engine.getDataPath">
			<summary>
			Returns a path to the					-data_pathdirectory specified at the engine startup.
			</summary>  
			<returns>Path to the data directory.</returns>
		</member>
		<member name="M:Unigine.Engine.isDone const">
			<summary>
			Returns the done flag on engine quit.
			</summary>  
			<returns>1 if engine is quitting; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorCache const">
			<summary>
			Returns a path to the editor script cache file.
			</summary>  
			<returns>Path to the editor script cache.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorFunction(char,int) const">
			<summary>
			Returns the editor function identifier.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="num_args"> Number of editor script function arguments. </param> 
			<returns>The editor script function identifier.</returns>
		</member>
		<member name="M:Unigine.Engine.isEditorFunction(char,int) const">
			<summary>
			Returns a value indicating if the editor script function exists.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="num_args"> Number of editor script function arguments. </param> 
			<returns>1 if the editor script function exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorInterpreter const">
			<summary>
			Returns a pointer to the editor interpreter.
			</summary>  
			<returns>Pointer to the editor interpreter.</returns>
		</member>
		<member name="M:Unigine.Engine.isEditorInterpreter const">
			<summary>
			Returns a value indicating if the function is called from the editor script.
			</summary>  
			<returns>1 if the function is called from the editor script; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.isEditorLoaded const">
			<summary>
			Returns a value indicating if the editor script is loaded.
			</summary>  
			<returns>1 if the editor script is loaded; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorLogic(int) const">
			<summary>
			Returns the registered EditorLogic instance by its number.
			</summary> 
			<param name="num"> Number of the EditorLogic instance. </param> 
			<returns>EditorLogic instance.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorScript">
			<summary>
			Returns a path to the editor script (provided by the					-editor_scriptcommand line argument).
			</summary>  
			<returns>Path to the editor script.</returns>
		</member>
		<member name="M:Unigine.Engine.setEditorVariable(char,Unigine.Variable)">
			<summary>
			Sets the editor script variable by its name.
			</summary> 
			<param name="name"> Name of the editor script variable. </param>
			<param name="v"> Value of the editor script variable. </param> 
		</member>
		<member name="M:Unigine.Engine.getEditorVariable(char) const">
			<summary>
			Returns the editor script variable by its name.
			</summary> 
			<param name="name"> Name of the world script variable. </param> 
			<returns>Value of the editor script variable.</returns>
		</member>
		<member name="M:Unigine.Engine.isEditorVariable(char) const">
			<summary>
			Returns a value indicating if the editor script variable exists.
			</summary> 
			<param name="name"> Name of the editor script variable. </param> 
			<returns>1 if the editor script variable exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getError">
			<summary>
			Returns the system error message.
			</summary>  
			<returns>The system error message of the current frame, if there is one; otherwise an empty string.</returns>
		</member>
		<member name="M:Unigine.Engine.getExternDefine const">
			<summary>
			Returns the external definitions specified on the application start-up.
			</summary>  
			<returns>The list of external definitions.</returns>
		</member>
		<member name="M:Unigine.Engine.getVersion const">
			<summary>
			Returns the Engine version info.
			</summary>  
			<returns>Engine version info.</returns>
		</member>
		<member name="M:Unigine.Engine.getBuildConfig const">
			<summary>
			Returns the Engine build configuration.
			</summary>  
			<returns>Returns the Engine build configuration (Debug, Development, or Release).</returns>
		</member>
		<member name="M:Unigine.Engine.isDouble const">
			<summary>
			Returns a value indicating if double precision of coordinates is enabled.
			</summary>  
			<returns>1 if double precision of coordinates is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getHomePath">
			<summary>
			Returns a path to the user's home directory.
			</summary>  
			<returns>Path to the user's home directory.</returns>
		</member>
		<member name="M:Unigine.Engine.isInitialized">
			<summary>
			Returns the initialization status of the engine.
			</summary>  
			<returns>1 if the engine is initialized; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getInterfaceTime">
			<summary>
			Returns the total accumulative time spent on rendering GUI widgets.
			</summary>  
			<returns>Time value, in milliseconds.</returns>
		</member>
		<member name="M:Unigine.Engine.isMainThread">
			<summary>
			Checks if the current thread is main.
			</summary>  
			<returns>1 if the current thread is main; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.isKnownArg">
			<summary>
			Checks if the specified command line argument is a registered one.
			</summary>  
			<returns>1 if the specified command line argument is a registered one; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getMessage">
			<summary>
			Returns the last system message of the current frame, or empty string if there are no messages.
			</summary>  
			<returns>The last system message.</returns>
		</member>
		<member name="M:Unigine.Engine.getNumArgs">
			<summary>
			Returns the number of command line arguments.
			</summary>  
			<returns>Number of command line arguments.</returns>
		</member>
		<member name="M:Unigine.Engine.getArg(int)">
			<summary>
			Returns the command-line argument by its index.
			</summary> 
			<param name="num"> Index of the argument </param> 
			<returns>Command-line argument</returns>
		</member>
		<member name="M:Unigine.Engine.getNumEditorLogics const">
			<summary>
			Returns the number of registered EditorLogic instances.
			</summary>  
			<returns>Number of EditorLogic instances.</returns>
		</member>
		<member name="M:Unigine.Engine.getNumPluginPaths">
			<summary>
			Returns the number of paths to directories with plugins specified via					-plugin_pathcommand-line option.
			</summary>  
			<returns>Number of the specified paths to directories with plugins.</returns>
		</member>
		<member name="M:Unigine.Engine.getNumPlugins const">
			<summary>
			Returns the number of loaded plugins.
			</summary>  
			<returns>Number of plugins.</returns>
		</member>
		<member name="M:Unigine.Engine.getNumSystemLogics const">
			<summary>
			Returns the number of registered SystemLogic instances.
			</summary>  
			<returns>Number of SystemLogic instances.</returns>
		</member>
		<member name="M:Unigine.Engine.getNumWorldLogics const">
			<summary>
			Returns the number of registered WorldLogic instances.
			</summary>  
			<returns>Number of WorldLogic instances.</returns>
		</member>
		<member name="M:Unigine.Engine.getPlugin(char)">
			<summary>
			Returns the loaded plugin interface.
			</summary> 
			<param name="name"> Name of the loaded plugin. </param> 
			<returns>Interface of the loaded plugin, if it exists; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginData(int) const">
			<summary>
			Returns the loaded plugin data.
			</summary> 
			<param name="num"> Index of the loaded plugin. </param> 
			<returns>Data of the loaded plugin, if it exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginInterface(int) const">
			<summary>
			Returns the loaded plugin interface.
			</summary> 
			<param name="num"> Index of the loaded plugin. </param> 
			<returns>Interface of the loaded plugin, if it exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginName(int) const">
			<summary>
			Returns the name of the loaded plugin by its index.
			</summary> 
			<param name="num"> Index of the loaded plugin. </param> 
			<returns>Loaded plugin name.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginOrder(int) const">
			<summary>
			Returns the execution order of the loaded plugin by its index.
			</summary> 
			<param name="num"> Index of the loaded plugin. </param> 
			<returns>Loaded plugin execution order.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginPath(int)">
			<summary>
			Returns a path to a plugin directory specified via -plugin_path.
			</summary> 
			<param name="num"> Plugin path number in the row of the specified plugin paths. </param> 
			<returns>Path to a plugin directory.</returns>
		</member>
		<member name="M:Unigine.Engine.getPresentTime">
			<summary>
			Returns the total time spent on waiting for the GPU after all calculations on the CPU are completed. See the Profiler article for details.
			</summary>  
			<returns>Time value, in milliseconds.</returns>
		</member>
		<member name="M:Unigine.Engine.getRenderTime">
			<summary>
			Returns the time value, required to prepare all data to be rendered in the current frame and feed rendering commands from the CPU to the GPU. See the Profiler article for details.
			</summary>  
			<returns>Rendering time value, milliseconds.</returns>
		</member>
		<member name="M:Unigine.Engine.getSavePath">
			<summary>
			Returns a path to a directory where a default configuration file, saved files and screenshots will be stored.
			</summary>  
			<returns>Path to a directory with the default configuration file, saved files, etc.</returns>
		</member>
		<member name="M:Unigine.Engine.getSoundApp">
			<summary>
			Returns the current sound API.
			</summary>  
			<returns>Sound API instance.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemCache const">
			<summary>
			Returns a path to the system script cache.
			</summary>  
			<returns>Path to the system script cache.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemFunction(char,int) const">
			<summary>
			Returns the system function identifier.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="num_args"> Number of system script function arguments. </param> 
			<returns>System script function identifier.</returns>
		</member>
		<member name="M:Unigine.Engine.isSystemFunction(char,int) const">
			<summary>
			Checks whether the system script function exists.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="num_args"> Number of system script function arguments. </param> 
			<returns>1 if the system script function exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemInterpreter const">
			<summary>
			Returns a pointer to the system interpreter.
			</summary>  
			<returns>Pointer to the system interpreter.</returns>
		</member>
		<member name="M:Unigine.Engine.isSystemInterpreter const">
			<summary>
			Checks if the function is called from the system script.
			</summary>  
			<returns>1 when the function is called from the system script; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemLogic(int) const">
			<summary>
			Returns the registered SystemLogic instance by the given number.
			</summary> 
			<param name="num"> Number of the SystemLogic instance. </param> 
			<returns>SystemLogic instance.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemScript">
			<summary>
			Returns a path to the system script.
			</summary>  
			<returns>Path to the system script.</returns>
		</member>
		<member name="M:Unigine.Engine.setSystemVariable(char,Unigine.Variable)">
			<summary>
			Sets a system script variable by a name.
			</summary> 
			<param name="name"> Name of the system script variable. </param>
			<param name="v"> Value of the system script variable. </param> 
		</member>
		<member name="M:Unigine.Engine.getSystemVariable(char) const">
			<summary>
			Returns the system script variable by its name.
			</summary> 
			<param name="name"> Name of the system script variable. </param> 
			<returns>System script variable.</returns>
		</member>
		<member name="M:Unigine.Engine.isSystemVariable(char) const">
			<summary>
			Checks whether a system script variable exists.
			</summary> 
			<param name="name"> Name of the system script variable. </param> 
			<returns>1 if the system script variable exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getTotalTime">
			<summary>
			Returns the total time that both rendering and calculating of the frame took (the duration of the main loop in the application execution sequence). Includes update, render, swap and wait GPU.
			</summary>  
			<returns>Total time value, milliseconds.</returns>
		</member>
		<member name="M:Unigine.Engine.getTotalCPUTime">
			<summary>
			Returns the total CPU time taken to perform calculations for the frame (the duration of the main loop in the application execution sequence). Includes update, render and swap.
			</summary>  
			<returns>Total CPU time value, milliseconds.</returns>
		</member>
		<member name="M:Unigine.Engine.getUpdateTime">
			<summary>
			Returns the duration of the update phase, during which the objects are prepared for their collision response to be calculated.
			</summary>  
			<returns>The update phase duration value, milliseconds.</returns>
		</member>
		<member name="M:Unigine.Engine.getVideoApp">
			<summary>
			Returns a graphics API used for rendering.
			</summary>  
			<returns>Graphics API used for rendering.</returns>
		</member>
		<member name="M:Unigine.Engine.getWorldFunction(char,int) const">
			<summary>
			Returns the world script function identifier.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="num_args"> Number of world script function arguments. </param> 
			<returns>World script function identifier.</returns>
		</member>
		<member name="M:Unigine.Engine.isWorldFunction(char,int) const">
			<summary>
			Returns value indicating if the world script function exists.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="num_args"> Number of world script function arguments. </param> 
			<returns>1 if the world script function exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getWorldInterpreter const">
			<summary>
			Returns a pointer to the world interpreter.
			</summary>  
			<returns>Pointer to the world interpreter.</returns>
		</member>
		<member name="M:Unigine.Engine.isWorldInterpreter const">
			<summary>
			Returns a value indicating if the function is called from the world script.
			</summary>  
			<returns>1 if the function is called from the world script; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.isWorldLoaded const">
			<summary>
			Returns a value indicating if the world script is loaded.
			</summary>  
			<returns>1 if the world script is loaded; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getWorldLogic(int) const">
			<summary>
			Returns the registered WorldLogic instance by its number.
			</summary> 
			<param name="num"> Number of the WorldLogic instance. </param> 
			<returns>WorldLogic instance.</returns>
		</member>
		<member name="M:Unigine.Engine.setWorldVariable(char,Unigine.Variable)">
			<summary>
			Sets a world script variable by its name.
			</summary> 
			<param name="name"> Name of the world script variable. </param>
			<param name="v"> Value of the world script variable. </param> 
		</member>
		<member name="M:Unigine.Engine.getWorldVariable(char) const">
			<summary>
			Returns a world script variable by its name.
			</summary> 
			<param name="name"> Name of the world script variable. </param> 
			<returns>World script variable.</returns>
		</member>
		<member name="M:Unigine.Engine.isWorldVariable(char) const">
			<summary>
			Returns a value indicating if the world script variable exists.
			</summary> 
			<param name="name"> Name of the world script variable. </param> 
			<returns>1 if the world script variable exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.addEditorLogic(EditorLogic)">
			<summary>
			Adds an EditorLogic instance to the engine runtime.
			</summary> 
			<param name="logic"> EditorLogic instance. </param> 
			<returns>1 if the EditorLogic instance has been added successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.addPlugin(Plugin)">
			<summary>
			Adds a plugin in engine runtime by using a pointer to this plugin.
			</summary> 
			<param name="plugin"> Plugin pointer. </param> 
			<returns>1 if the plugin ha been added successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.addPlugin(char)">
			<summary>
			Adds a plugin in engine runtime by its name.
			</summary> 
			<param name="name"> Plugin name. </param> 
			<returns>1 if the plugin has been added successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.addSystemLogic(SystemLogic)">
			<summary>
			Adds an SystemLogic instance to the engine runtime.
			</summary> 
			<param name="logic"> SystemLogic instance. </param> 
			<returns>1 if the SystemLogic instance has been added successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.addWorldLogic(WorldLogic)">
			<summary>
			Adds a WorldLogic instance to the engine runtime.					Instances of the WorldLogic class should not be added while the world is loaded and the world script is being executed (as you can't change a world script while the world is loaded). In such a case the init() method shall not be called if the WorldLogic is added before opening the world.
			</summary> 
			<param name="logic"> WorldLogic instance. </param> 
			<returns>1 if the WorldLogic instance has been added successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.dialogError(char)">
			<summary>
			Displays a dialog window with errors set using the error() function.
			</summary> 
			<param name="title"> Title to be displayed in the error window. </param> 
		</member>
		<member name="M:Unigine.Engine.dialogMessage(char)">
			<summary>
			Displays a dialog window with the last message set using the message() function.
			</summary> 
			<param name="title"> Title to be displayed in the message window. </param> 
		</member>
		<member name="M:Unigine.Engine.findPlugin(char) const">
			<summary>
			Searches the index of the loaded plugin by its name.
			</summary> 
			<param name="name"> Name of the plugin. </param> 
			<returns>Index of the plugin.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,int,char,char,char)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application.
			</summary> 
			<param name="version"> Version number (UNIGINE_VERSION). </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of command line arguments values. </param>
			<param name="project"> Project name. If this parameter is set, it forces the engine to store rewritable data (such as log file, cache files, config files) in user profile rather than in a directory with binaries. Notice that only the project name is required to pass in for this parameter, not the full path to the project. If there is no need to change location of such files, pass the 0 value. </param>
			<param name="password"> Password for the filesystem archives. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,int,wchar_t,char,char)">
			<summary>
			Initializes a new engine instance.
			</summary> 
			<param name="version"> Engine version number (UNIGINE_VERSION). </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of command line arguments values. </param>
			<param name="args"> Array of command line arguments values. </param>
			<param name="project"> Project name. If this parameter is set, it forces the engine to store rewritable data (such as log file, cache files, config files) in user profile rather than in a directory with binaries. Notice that only the project name is required to pass in for this parameter, not the full path to the project. If there is no need to change location of such files, pass the 0 value. </param>
			<param name="password"> Password for the filesystem archives. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,char,int,char,char,char)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application.
			</summary> 
			<param name="version"> Version number (UNIGINE_VERSION). </param>
			<param name="window_title"> Title to be set for the application window. </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of command line arguments values. </param>
			<param name="project"> Project name. If this parameter is set, it forces the engine to store rewritable data (such as log file, cache files, config files) in user profile rather than in a directory with binaries. Notice that only the project name is required to pass in for this parameter, not the full path to the project. If there is no need to change location of such files, pass the 0 value. </param>
			<param name="password"> Password for the filesystem archives. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,char,int,wchar_t,char,char)">
			<summary>
			Initializes a new engine instance.
			</summary> 
			<param name="version"> Engine version number (UNIGINE_VERSION). </param>
			<param name="window_title"> Title to be set for the application window. </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of command line arguments values. </param>
			<param name="args"> Array of command line arguments values. </param>
			<param name="project"> Project name. If this parameter is set, it forces the engine to store rewritable data (such as log file, cache files, config files) in user profile rather than in a directory with binaries. Notice that only the project name is required to pass in for this parameter, not the full path to the project. If there is no need to change location of such files, pass the 0 value. </param>
			<param name="password"> Password for the filesystem archives. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,App,int,wchar_t,char,char)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application.
			</summary> 
			<param name="version"> Version number (UNIGINE_VERSION). </param>
			<param name="app"> Pointer to the graphics App class. </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of values of command line arguments (a wide-character string). </param>
			<param name="project"> Project name. If this parameter is set, it forces the engine to store rewritable data (such as log file, cache files, config files) in user profile rather than in a directory with binaries. Notice that only the project name is required to pass in for this parameter, not the full path to the project. If there is no need to change location of such files, pass the 0 value. </param>
			<param name="password"> Password for the filesystem archives. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,App,int,char,char,char)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application.
			</summary> 
			<param name="version"> Version number (UNIGINE_VERSION). </param>
			<param name="app"> Pointer to the graphics App class. </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of values of command line arguments. </param>
			<param name="args"> Array of values of command line arguments. </param>
			<param name="project"> Project name. If this parameter is set, it forces the engine to store rewritable data (such as log file, cache files, config files) in user profile rather than in a directory with binaries. Notice that only the project name is required to pass in for this parameter, not the full path to the project. If there is no need to change location of such files, pass the 0 value. </param>
			<param name="password"> Password for the filesystem archives. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,App,char,char,char,int,wchar_t,char,char)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application, which is stored at the specified path.
			</summary> 
			<param name="version"> Version number (UNIGINE_VERSION). </param>
			<param name="app"> Pointer to the graphics App class. </param>
			<param name="window_title"> Title to be set for the application window. </param>
			<param name="app_path"> Path to a directory where binary executable file is stored. Pass the 0 value to ignore this parameter. </param>
			<param name="home_path"> Path to the user's home directory. </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of values of command line arguments (a wide-character string). </param>
			<param name="project"> Project name. If this parameter is set, it forces the engine to store rewritable data (such as log file, cache files, config files) in user profile rather than in a directory with binaries. Notice that only the project name is required to pass in for this parameter, not the full path to the project. If there is no need to change location of such files, pass the 0 value. </param>
			<param name="password"> Password for the filesystem archives. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,App,char,char,int,wchar_t,char,char)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application, which is stored at the specified path.
			</summary> 
			<param name="version"> Version number (UNIGINE_VERSION). </param>
			<param name="app"> Pointer to the graphics App class. </param>
			<param name="app_path"> Path to a directory where binary executable file is stored. Pass the 0 value to ignore this parameter. </param>
			<param name="home_path"> Path to the user's home directory. </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of values of command line arguments (a wide-character string). </param>
			<param name="project"> Project name. If this parameter is set, it forces the engine to store rewritable data (such as log file, cache files, config files) in user profile rather than in a directory with binaries. Notice that only the project name is required to pass in for this parameter, not the full path to the project. If there is no need to change location of such files, pass the 0 value. </param>
			<param name="password"> Password for the filesystem archives. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,App,char,char,char,int,char,char,char)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application, which is stored at the specified path.
			</summary> 
			<param name="version"> Version number (UNIGINE_VERSION). </param>
			<param name="app"> Pointer to the graphics App class. </param>
			<param name="window_title"> Title to be set for the application window. </param>
			<param name="app_path"> Path to a directory where binary executable file is stored. Pass the 0 value to ignore this parameter. </param>
			<param name="home_path"> Path to the user's home directory. </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of values of command line arguments. </param>
			<param name="project"> Project name. If this parameter is set, it forces the engine to store rewritable data (such as log file, cache files, config files) in user profile rather than in a directory with binaries. Notice that only the project name is required to pass in for this parameter, not the full path to the project. If there is no need to change location of such files, pass the 0 value. </param>
			<param name="password"> Password for the filesystem archives. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,App,char,char,int,char,char,char)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application, which is stored at the specified path.
			</summary> 
			<param name="version"> Version number (UNIGINE_VERSION). </param>
			<param name="app"> Pointer to the graphics App class. </param>
			<param name="app_path"> Path to a directory where binary executable file is stored. Pass the 0 value to ignore this parameter. </param>
			<param name="home_path"> Path to the user's home directory. </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of values of command line arguments. </param>
			<param name="project"> Project name. If this parameter is set, it forces the engine to store rewritable data (such as log file, cache files, config files) in user profile rather than in a directory with binaries. Notice that only the project name is required to pass in for this parameter, not the full path to the project. If there is no need to change location of such files, pass the 0 value. </param>
			<param name="password"> Password for the filesystem archives. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. Notice that the specified password must be the same as for the project archive (if it exists). Pass the 0 value if you do not need to set a password. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.main(SystemLogic,WorldLogic,EditorLogic)">
			<summary>
			Engine main loop. Replaces the following commands:
			</summary> 
			<param name="system"> A SystemLogic instance. </param>
			<param name="world"> A WorldLogic instance. </param>
			<param name="editor"> An EditorLogic instance. </param> 
		</member>
		<member name="M:Unigine.Engine.removeEditorLogic(EditorLogic)">
			<summary>
			Removes an EditorLogic instance from engine runtime.
			</summary> 
			<param name="logic"> An EditorLogic instance. </param> 
			<returns>1 if the instance has been removed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.removePlugin(Plugin)">
			<summary>
			Removes a plugin by using a pointer to this plugin.
			</summary> 
			<param name="plugin"> Plugin pointer to remove. </param> 
			<returns>1 if the plugin has been removed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.removeSystemLogic(SystemLogic)">
			<summary>
			Removes a SystemLogic instance from engine runtime.
			</summary> 
			<param name="logic"> A SystemLogic instance. </param> 
			<returns>1 if the instance has been removed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.removeWorldLogic(WorldLogic)">
			<summary>
			Removes a WorldLogic instance from engine runtime.					Instances of the WorldLogic class should not be removed while the world is loaded and the world script is being executed (as you can't change a world script while the world is loaded). In such a case the shutdown() method shall not be called if the WorldLogic is removed before closing the world.
			</summary> 
			<param name="logic"> A WorldLogic instance. </param> 
			<returns>1 if the instance has been removed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.render">
			<summary>
			Engine rendering function. This function must be called every frame.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function can receive up to 8 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 1 argument.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 2 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 3 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 5 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 6 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 7 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,int)">
			<summary>
			Runs the editor script function by its name.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="args"> Pointer to editor script function arguments. </param>
			<param name="num_args"> Number of editor script function arguments. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int)">
			<summary>
			Runs the editor script function by its id. The target function can receive up to 8 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,int)">
			<summary>
			Runs the editor script function by its id.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="args"> Pointer to editor script function arguments. </param>
			<param name="num_args"> Number of editor script function arguments. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 1 argument.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 2 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 3 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 5 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 6 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 7 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function can receive up to 8 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 1 argument.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 2 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 3 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 6 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 7 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,int)">
			<summary>
			Runs system script function by its name.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="args"> Pointer to system script function arguments. </param>
			<param name="num_args"> Number of system script function arguments. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int)">
			<summary>
			Runs the system script function by its id. The target function can receive up to 8 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,int)">
			<summary>
			Runs system script function by its id.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="args"> Pointer to system script function arguments. </param>
			<param name="num_args"> Number of system script function arguments. </param> 
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 1 argument.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 2 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 3 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 4 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 5 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 6 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 7 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 8 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function can receive up to 8 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 1 argument.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable)">
			<summary>
			Runs the world script function by its identifier. The target function must receive one argument.
			</summary> 
			<param name="id"> Identifier of the world script function. </param>
			<param name="a0"> Argument </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 2 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 3 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 5 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 6 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,int)">
			<summary>
			Runs the world script function by its name.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="args"> Pointer to world script function arguments. </param>
			<param name="num_args"> Number of world script function arguments. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int)">
			<summary>
			Runs the world script function by its id.
			</summary> 
			<param name="id"> ID of the world script function. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,int)">
			<summary>
			Runs the world script function by its id.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="args"> Pointer to world script function arguments. </param>
			<param name="num_args"> Number of world script function arguments. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 2 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 3 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>Runs the world script function by its id. The target function must receive 4 arguments.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 5 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 6 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 7 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 8 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.shutdown">
			<summary>
			Deletes the pointer to the existing engine instance.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.swap">
			<summary>
			Engine swap buffers function. This function must be called every frame.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.update">
			<summary>
			Engine update function. This function must be called every frame.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.isEvaluation const">
			<summary>
			Returns a value indicating if the current version of the Engine is for evaluation only.
			</summary>  
			<returns>1 if the evaluation version of the Engine is used; otherwise, 0.</returns>
		</member>
		<member name="F:Unigine.Engine.BUILD_CONFIG_DEBUG">
			<summary>
			Debug build configuration.
		</summary>
		</member>
		<member name="F:Unigine.Engine.BUILD_CONFIG_DEVELOPMENT">
			<summary>
			Development build configuration.
		</summary>
		</member>
		<member name="F:Unigine.Engine.BUILD_CONFIG_RELEASE">
			<summary>
			Release build configuration.
		</summary>
		</member>
	</members>
</doc>